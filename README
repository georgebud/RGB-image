Pentru prima cerinta a temei am realizat codificarea unei imagini in format PPM, folosind algoritmul de compresie detaliat in enunt.
Pentru inceput am citit din fisierul .PPM si am salvat informatiile de care aveam nevoie (dimensiunea imaginii si pixelii cu valorile red, green si blue) intr-o
structura de tipul Image.
Functia divideData primeste printre parametri nodul radacina (root) al arborelui ce va contine culorile medii pentru red, green si blue din blocul initial
(imaginea intreaga). Daca gradul similaritatii este mai mare decat un prag dat, se imparte imaginea in 4 sferturi si se creeaza pentru root 4 copii (top left, top right,
bottom right, bottom left), fiecare reprezentand un sfert din imaginea initiala (root). Acest procedeu se repeta recursiv, fiecare copil fiind la randul sau root
(radacina) pentru functie. Fiecare nod este adaugat intr-un vector de structuri de tipul QuadtreeNode, care creste pe masura ce se creeaza un nou nod radacina.
Conditia de iesire din recursivitate se atinge atunci cand gradul de similaritate este mai mic decat pragul impus. In acest caz nu se va mai imparti imaginea in alte
sferturi, nodul respectiv fiind o frunza care se aduna prin intermediul variabilei leafNumber. Deoarece imaginea reprezentata de acest nod nu se mai poate imparti in 4
sferturi, copiii acestui nod vor primi valoarea -1.
In structura CompressedData se retine numarul de culori ale imaginii (reprezentat de totalitatea nodurilor frunza), numarul total de noduri ale arborelui, precum si
vectorul de structuri de tipul QuadtreeNode (o astfel de structura salveaza pentru pixelii unui bloc valorile medii ale componentelor red, green, blue, numarul de pixeli
din blocul descris de nod (area) si indicii asociati nodurilor copii).
In final, se creeaza fisierul comprimat (binar) prin intermediul functiei writeFile_compressed ce primeste ca parametri numele fisierului ce urmeaza a fi creat, si o
structura de date de tipul CompressedData in care au fost retinute informatiile prezentate anterior. Fisierul binar va contine, in aceasta ordine, numarul de culori,
numarul de noduri si informatiile din vectorul de structuri (pentru fiecare nod, pornind de la nodul radacina, valorile RGB medii din bloc, numarul de pixeli din bloc
si indicii asociati nodurilor copil).

A doua cerinta realizeaza crearea unei imagini .PPM dintr-un fisier compresat (inversul primei cerinte). Pentru aceasta am folosit o functie de citire dintr-un fisier
compresat (readFile_compressed) in care citesc numarul de culori, numarul de noduri si informatiile structurii de tip QuadtreeNode (se creeaza vectorul de structuri) si
le retin in structura CompressedData care va fi returnata. Arborele se creeaza pe baza vectorului de structuri. Datorita informatiilor stocate in radacina arborelui creez
o matrice de pixeli si apelez recursiv functia collectData care, pentru fiecare pixel, adauga canalele Red, Green, Blue atunci cand se ajunge la un nod frunza.
In final, se scrie fisierul binar .PPM prin intermediul functiei writeFile_PPM ce primeste ca parametru numele fisierului ce urmeaza a fi creat (imaginea), si o structura
de date de tipul Image in care sunt salvate dimensiunile imaginii si matricea de pixeli. Scrierea se face in aceasta ordine: tipul fisierului 'P6', numarul de pixeli pe
orizontala si numarul de pixeli pe verticala, valoarea maxima pe care o poate lua o culoare (255) si imaginea propriu-zisa.

Cerinta a treia realizeaza oglindirea imaginii pe orizontala sau pe verticala. Logica acestei cerinte este aproape la fel cu logica primei cerinte: se citeste din fisier
binar, se creeaza matricea de pixeli a imaginii, se creeaza arborele cuaternar prin intermediul functiei divideData.
Pe baza dimensiunii stocate in radacina arborelui se initializeaza o matrice de pixeli care va fi populata pixel cu pixel conform functiei mirror. Aceasta functie este
asemanatoare cu collectData, diferenta este ca recursivitatea se face in mod diferit (nodurile din arbore vor salva informatia diferit) : pentru oglindirea pe orizontala:
copiii top_left si bottom_left vor stoca informatia care, la decompresie (in collectData), se stoca in top_right, respectiv bottom_right, iar top_right si bottom_right
vor stoca informatia care se stoca in top_left, respectiv bottom_left; iar pentru oglindirea pe verticala se realizeaza acelasi lucru doar ca pentru copiii top_left,
bottom_left - top_right, bottom_right.
In final, se creeaza fisierul binar .PPM, oglindit, prin intermediul functiei writeFile_PPM, la fel ca la cerinta anterioara.

Cerinta bonus realizeaza suprapunerea a doua imagini. Pentru prima parte a implementarii, logica este asemanatoare cu logica celei de-a treia cerinte: se dau 2 imagini,
se citeste din fisierele binare, se creeaza 2 matrici de pixeli si 2 arbori.
Pe baza dimensiunilor stocate in cele 2 radacini din cei 2 arbori, se initializeaza 2 matrici de pixeli care vor fi populate conform functiei collectData. Pentru a
suprapune cele 2 imagini, am creat functia overlap care se foloseste de cele 2 matrici si face media aritmetica al fiecarui canal red, green, blue pentru pixelul aflat pe
aceeasi pozitie in cele 2 matrici. Valorile rezultate se actualizeaza intr-una din matrici. Functia va intoarce o structura de tipul Image cu matricea de pixeli rezultata.
Aceasta va fi data ca parametru functiei de scriere writeFile_PPM care creeaza fisierul binar (.PPM) - imaginea suprapusa.
